<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat - <%= customRequest.description.substring(0, 30) %>...</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            flex-direction: column;
        }
        
        .chat-header {
            background: #230707;
            padding: 1rem 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 2px solid #f0f0f0;
        }
        
        .chat-title h2 {
            color: #333;
            margin-bottom: 0.5rem;
        }
        
        .chat-title p {
            color: #666;
            font-size: 0.9rem;
        }
        
        .back-btn {
            background: #667eea;
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            margin-left: auto;
        }
        
        .back-btn:hover {
            background: #5a6fd8;
        }
        
        .chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            max-width: 900px;
            margin: 0 auto;
            width: 100%;
            background: rgb(40, 11, 11);
            border-radius: 15px 15px 0 0;
            margin-top: 1rem;
            overflow: hidden;
            box-shadow: 0 -5px 20px rgba(0,0,0,0.1);
        }
        
        .request-info {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 1.5rem;
            border-bottom: 2px solid #dee2e6;
            border-radius: 8px 8px 0 0;
        }
        
        .request-info h4 {
            color: #495057;
            margin-bottom: 0.5rem;
        }
        
        .request-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 0.5rem;
        }
        
        .detail-item {
            background: rgb(40, 12, 12);
            padding: 0.75rem;
            border-radius: 8px;
            border-left: 3px solid #667eea;
        }
        
        .detail-label {
            font-weight: 600;
            color: #495057;
            font-size: 0.8rem;
            text-transform: uppercase;
            margin-bottom: 0.25rem;
        }
        
        .detail-value {
            color: #212529;
        }
        
        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            background: #172839;
        }
        
        .message {
            margin-bottom: 1.5rem;
            max-width: 70%;
            animation: slideIn 0.3s ease-out;
            display: flex;
            align-items: flex-end;
            gap: 0.75rem;
        }
        
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .message.user {
            margin-left: auto;
            flex-direction: row-reverse;
        }
        
        .message.designer {
            margin-right: auto;
            flex-direction: row;
        }
        
        .message-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 0.9rem;
            flex-shrink: 0;
            margin-bottom: 1rem;
        }
        
        .message.user .message-avatar {
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
            color: white;
            box-shadow: 0 2px 8px rgba(79, 70, 229, 0.3);
        }
        
        .message.designer .message-avatar {
            background: linear-gradient(135deg, #64748b 0%, #475569 100%);
            color: rgb(25, 9, 9);
            box-shadow: 0 2px 8px rgba(100, 116, 139, 0.3);
        }
        
        .message-content {
            flex: 1;
        }
        
        .message-bubble {
            padding: 0.75rem 1rem;
            border-radius: 18px;
            word-wrap: break-word;
            position: relative;
        }
        
        .message.user .message-bubble {
            background: #391717;
            color: #1e293b;
            border-bottom-right-radius: 5px;
            box-shadow: 0 4px 12px rgba(79, 70, 229, 0.1);
            font-family: 'Inter', 'Segoe UI', sans-serif;
            font-weight: 500;
            border: 2px solid rgba(79, 70, 229, 0.2);
            font-size: 0.95rem;
            line-height: 1.4;
        }
        
        .message.designer .message-bubble {
            background: linear-gradient(135deg, #ffffff 0%, #f1f5f9 100%);
            color: #1e293b;
            border: 2px solid #e2e8f0;
            border-bottom-left-radius: 5px;
            box-shadow: 0 4px 12px rgba(15, 23, 42, 0.08);
            font-family: 'Roboto', 'Segoe UI', sans-serif;
            font-weight: 400;
            font-size: 0.95rem;
            line-height: 1.4;
        }
        
        .message-info {
            font-size: 0.7rem;
            margin-top: 0.25rem;
            opacity: 0.7;
        }
        
        .message.user .message-info {
            text-align: right;
            color: #666;
        }
        
        .message.designer .message-info {
            text-align: left;
            color: #666;
        }
        
        .typing-indicator {
            display: none;
            padding: 1rem;
            font-style: italic;
            color: #666;
        }
        
        .typing-dots {
            display: inline-block;
        }
        
        .typing-dots::after {
            content: '';
            animation: typing 1.5s infinite;
        }
        
        @keyframes typing {
            0%, 60% { content: ''; }
            25% { content: '.'; }
            50% { content: '..'; }
            75% { content: '...'; }
        }
        
        .input-container {
            padding: 1rem;
            background: white;
            border-top: 1px solid #e9ecef;
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }
        
        .message-input {
            flex: 1;
            padding: 0.75rem 1rem;
            border: 1px solid #e9ecef;
            border-radius: 25px;
            outline: none;
            font-size: 0.9rem;
            resize: none;
            max-height: 100px;
        }
        
        .message-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.1);
        }
        
        .send-btn {
            background: #667eea;
            color: white;
            border: none;
            border-radius: 50%;
            width: 45px;
            height: 45px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.2s;
        }
        
        .send-btn:hover {
            background: #5a6fd8;
        }
        
        .send-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        
        .connection-status {
            padding: 0.5rem 1rem;
            text-align: center;
            font-size: 0.8rem;
            background: #ffc107;
            color: #856404;
            display: none;
        }
        
        .connection-status.connected {
            background: #28a745;
            color: white;
        }
        
        .connection-status.disconnected {
            background: #dc3545;
            color: white;
            display: block;
        }
        
        .attachment-btn {
            background: none;
            border: none;
            color: #667eea;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 50%;
            margin-right: 0.5rem;
        }
        
        .attachment-btn:hover {
            background: rgba(102, 126, 234, 0.1);
        }
        
        @media (max-width: 768px) {
            .chat-container {
                margin: 0;
                border-radius: 0;
                height: 100vh;
            }
            
            .chat-header {
                padding: 1rem;
            }
            
            .request-details {
                grid-template-columns: 1fr;
            }
            
            .message {
                max-width: 85%;
            }
        }
    </style>
</head>
<body>
    <div class="chat-header">
        <div class="chat-title">
            <h2>Chat with <%= isUser ? customRequest.designerDetails.name : customRequest.userDetails.name %></h2>
            <p>Custom Design Request</p>
        </div>
        <a href="<%= isUser ? '/dashboard' : '/designer/custom-requests' %>" class="back-btn">‚Üê Back</a>
    </div>
    
    <div class="connection-status" id="connectionStatus">
        Connecting...
    </div>
    
    <div class="chat-container">
        <div class="request-info">
            <h4>Project Details</h4>
            <div class="request-details">
                <div class="detail-item">
                    <div class="detail-label">Description</div>
                    <div class="detail-value"><%= customRequest.description %></div>
                </div>
                <% if (customRequest.budget) { %>
                <div class="detail-item">
                    <div class="detail-label">Budget</div>
                    <div class="detail-value">‚Çπ<%= customRequest.budget %></div>
                </div>
                <% } %>
                <% if (customRequest.deadline) { %>
                <div class="detail-item">
                    <div class="detail-label">Deadline</div>
                    <div class="detail-value"><%= new Date(customRequest.deadline).toLocaleDateString() %></div>
                </div>
                <% } %>
                <div class="detail-item">
                    <div class="detail-label">Status</div>
                    <div class="detail-value">
                        <span style="background: <%= customRequest.status === 'pending' ? '#ffc107' : customRequest.status === 'accepted' ? '#28a745' : customRequest.status === 'completed' ? '#6c757d' : '#dc3545' %>; color: white; padding: 0.25rem 0.5rem; border-radius: 12px; font-size: 0.8rem;">
                            <%= customRequest.status.toUpperCase() %>
                        </span>
                    </div>
                </div>
                <% if (customRequest.designerPrice && customRequest.status === 'accepted') { %>
                <div class="detail-item">
                    <div class="detail-label">Designer Price</div>
                    <div class="detail-value">‚Çπ<%= customRequest.designerPrice %></div>
                </div>
                <% } %>
            </div>
        </div>
        
        <div class="messages-container" id="messagesContainer">
            <!-- Messages will be loaded here -->
        </div>
        
        <div class="typing-indicator" id="typingIndicator">
            <span class="typing-dots">Someone is typing</span>
        </div>
        
        <div class="input-container">
            <button class="attachment-btn" onclick="alert('File attachment coming soon!')">
                üìé
            </button>
            <textarea 
                class="message-input" 
                id="messageInput" 
                placeholder="Type your message..."
                rows="1"
                maxlength="1000"
            ></textarea>
            <button class="send-btn" id="sendBtn">
                ‚û§
            </button>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Configuration
        const socket = io();
        const requestId = '<%= customRequest._id %>';
        const currentUserId = '<%= isUser ? userId : designerId %>';
        const currentUserType = '<%= isUser ? "user" : "designer" %>';
        const currentUserName = '<%= isUser ? customRequest.userDetails.name : customRequest.designerDetails.name %>';
        
        // DOM elements
        const messagesContainer = document.getElementById('messagesContainer');
        const messageInput = document.getElementById('messageInput');
        const sendBtn = document.getElementById('sendBtn');
        const connectionStatus = document.getElementById('connectionStatus');
        const typingIndicator = document.getElementById('typingIndicator');
        
        // State
        let isTyping = false;
        let typingTimeout;
        
        // Socket connection handling
        socket.on('connect', () => {
            console.log('Connected to chat server');
            connectionStatus.textContent = 'Connected';
            connectionStatus.className = 'connection-status connected';
            setTimeout(() => {
                connectionStatus.style.display = 'none';
            }, 2000);
            
            // Join the chat room
            socket.emit('joinRoom', { requestId });
        });
        
        socket.on('disconnect', () => {
            console.log('Disconnected from chat server');
            connectionStatus.textContent = 'Disconnected - Trying to reconnect...';
            connectionStatus.className = 'connection-status disconnected';
            connectionStatus.style.display = 'block';
        });
        
        // Load previous messages
        socket.on('previousMessages', (messages) => {
            console.log('Loaded previous messages:', messages.length);
            messagesContainer.innerHTML = '';
            messages.forEach(message => {
                displayMessage(message);
            });
            scrollToBottom();
        });
        
        // Receive new messages
        socket.on('chatMessage', (data) => {
            console.log('New message received:', data);
            displayMessage(data);
            scrollToBottom();
            
            // Hide typing indicator if it was from the other user
            if (data.senderId !== currentUserId) {
                hideTypingIndicator();
            }
        });
        
        // Typing indicators
        socket.on('userTyping', (data) => {
            if (data.userId !== currentUserId) {
                showTypingIndicator(data.userName);
            }
        });
        
        socket.on('userStoppedTyping', (data) => {
            if (data.userId !== currentUserId) {
                hideTypingIndicator();
            }
        });
        
        // Display message in chat
        function displayMessage(message) {
            const messageDiv = document.createElement('div');
            const isCurrentUser = message.senderId === currentUserId;
            
            messageDiv.className = `message ${isCurrentUser ? currentUserType : (currentUserType === 'user' ? 'designer' : 'user')}`;
            
            const time = new Date(message.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
            const senderName = isCurrentUser ? 'You' : (currentUserType === 'user' ? 'Designer' : 'Customer');
            
            // Get initials for avatar
            let avatarInitials;
            if (isCurrentUser) {
                avatarInitials = currentUserName.charAt(0).toUpperCase();
            } else {
                const otherUserName = currentUserType === 'user' ? '<%= customRequest.designerDetails.name %>' : '<%= customRequest.userDetails.name %>';
                avatarInitials = otherUserName.charAt(0).toUpperCase();
            }
            
            messageDiv.innerHTML = `
                <div class="message-avatar">
                    ${avatarInitials}
                </div>
                <div class="message-content">
                    <div class="message-bubble">
                        ${escapeHtml(message.message)}
                    </div>
                    <div class="message-info">
                        ${senderName} ‚Ä¢ ${time}
                    </div>
                </div>
            `;
            
            messagesContainer.appendChild(messageDiv);
        }
        
        // Send message
        function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) return;
            
            const messageData = {
                requestId: requestId,
                sender: currentUserType,
                senderId: currentUserId,
                message: message
            };
            
            socket.emit('chatMessage', messageData);
            messageInput.value = '';
            adjustTextareaHeight();
            
            // Stop typing indicator
            stopTyping();
        }
        
        // Typing indicators
        function startTyping() {
            if (!isTyping) {
                isTyping = true;
                socket.emit('typing', { 
                    requestId: requestId, 
                    userId: currentUserId, 
                    userName: currentUserName 
                });
            }
            
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(stopTyping, 3000);
        }
        
        function stopTyping() {
            if (isTyping) {
                isTyping = false;
                socket.emit('stopTyping', { 
                    requestId: requestId, 
                    userId: currentUserId 
                });
            }
            clearTimeout(typingTimeout);
        }
        
        function showTypingIndicator(userName) {
            typingIndicator.innerHTML = `<span class="typing-dots">${userName} is typing</span>`;
            typingIndicator.style.display = 'block';
            scrollToBottom();
        }
        
        function hideTypingIndicator() {
            typingIndicator.style.display = 'none';
        }
        
        // Auto-resize textarea
        function adjustTextareaHeight() {
            messageInput.style.height = 'auto';
            messageInput.style.height = Math.min(messageInput.scrollHeight, 100) + 'px';
        }
        
        // Scroll to bottom
        function scrollToBottom() {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        // Escape HTML
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        // Event listeners
        sendBtn.addEventListener('click', sendMessage);
        
        messageInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            } else {
                startTyping();
            }
        });
        
        messageInput.addEventListener('input', () => {
            adjustTextareaHeight();
            startTyping();
        });
        
        messageInput.addEventListener('blur', stopTyping);
        
        // Initialize
        messageInput.focus();
        scrollToBottom();
        
        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            socket.emit('leaveRoom', { requestId });
        });
        
        console.log('Chat initialized for request:', requestId);
    </script>
</body>
</html>
